// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}
 
model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  location      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role?

  accounts      Account[]
  sessions      Session[]
  traineeProfile TraineeProfile?
  trainerProfile TrainerProfile?
  gymProfile GymProfile?
 
}

enum Role {
  TRAINEE
  TRAINER
  GYM
}

model TraineeProfile {
  id     String   @id @default(cuid())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @unique
  goals  String[] // Array of selected goals
}

model TrainerProfile {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
  services String[] // Array of offered services
}

model GymProfile {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  name       String
  address    String
  phone      String
  website    String
  fee        String
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   username String @unique
//   password String
//   location String?
//   posts Post[]
// }

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   user    User    @relation(fields: [userId], references: [id])
//   userId  Int
// }